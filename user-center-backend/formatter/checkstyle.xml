<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
    <!-- 文件编码格式检查 -->
    <property name="charset" value="UTF-8"/>

    <!-- 检查文件是否以新行结束 -->
    <property name="fileExtensions" value="java, properties, xml"/>
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- 检查文件长度不超过 2000 行 -->
    <module name="FileLength">
        <property name="max" value="2000"/>
    </module>

    <!-- 检查每行不超过 120个字符 -->
    <module name="LineLength">
        <property name="max" value="120"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <!-- 禁止文件中包含制表符 Tab -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- 检查是否有多余空行 -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="行尾有空格"/>
    </module>

    <module name="TreeWalker">
        <!-- 导入语句检查-->
        <!-- 避免使用 * -->
        <module name="AvoidStarImport">
            <property name="excludes" value="java.io,java.net,java.lang.Math"/>
            <!-- 实例：import java.util.*; -->
            <property name="allowClassImports" value="false"/>
            <!-- 实例：import static org.junit.Assert.*; -->
            <property name="allowStaticMemberImports" value="true"/>
        </module>
        <!-- 检查是否从非法的包中导入了类 -->
        <module name="IllegalImport"/>
        <!-- 检查是否导入了多余的包 -->
        <module name="RedundantImport"/>
        <!-- 没用的 import 检查，比如：1.没有被用到 2.重复的 3.import java.lang的 4.import 与该类在同一个 package 的 -->
        <module name="UnusedImports"/>

        <!-- 注释检查 -->
        <!-- 检查方法和构造函数的 javadoc -->
        <module name="JavadocType">
            <property name="scope" value="public"/>
            <property name="allowUnknownTags" value="true"/>
            <message key="javadoc.missing" value="类注释：缺少Javadoc注释"/>
        </module>
        <module name="JavadocMethod">
            <property name="accessModifiers" value="public"/>
            <property name="tokens" value="METHOD_DEF"/>
            <message key="javadoc.missing" value="方法注释：缺少Javadoc注释"/>
        </module>
        <!-- 确保注释位于代码同一行或单独一行 -->
        <module name="CommentsIndentation"/>

        <!-- 命名检查 -->
        <!-- 局部的 final变量，包括 catch 中的参数的检查 -->
        <module name="LocalFinalVariableName"/>
        <!-- 变量名必须是小写字母开头的驼峰命名 -->
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="变量名 ''{0}'' 必须是小写字母开头的驼峰命名"/>
        </module>
        <!-- 包名必须是小写字母，不能有下划线 -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="包名 ''{0}'' 必须是小写字母且不包含下划线"/>
        </module>
        <!-- 仅仅是 static 型的变量（不包括 static final 型）的检查 -->
        <module name="StaticVariableName"/>
        <!-- Class 或 Interface 名检查，默认 ^[A-Z][a-zA-Z0-9]*$-->
        <module name="TypeName">
            <property name="severity" value="warning"/>
            <message key="name.invalidPattern" value="名称 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 抽象类名的检查 -->
        <module name="AbstractClassName">
            <property name="format" value="^(Abstract).+$"/>
        </module>
        <!-- 类的泛型类型名称 -->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]{1,2}$"/>
        </module>
        <!-- 接口的泛型名称 -->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z]{1,2}$"/>
        </module>
        <!-- 方法的泛型名称 -->
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]{1,2}$"/>
        </module>
        <!-- 非 static 型变量的检查 -->
        <module name="MemberName"/>
        <!-- 方法名必须是小写字母开头的驼峰命名 -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="方法名 ''{0}'' 必须是小写字母开头的驼峰命名"/>
        </module>
        <!-- 方法的参数名必须是小写字母开头的驼峰命名 -->
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="参数名 ''{0}'' 必须是小写字母开头的驼峰命名"/>
        </module>
        <!-- 常量必须全部大写，单词间用下划线分隔 -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <message key="name.invalidPattern" value="常量名 ''{0}'' 必须全部大写，单词间用下划线分隔"/>
        </module>
        <!-- lambda表达式的参数名 -->
        <module name="LambdaParameterName"/>

        <!-- 定义检查 -->
        <!-- 检查数组类型定义的样式 -->
        <module name="ArrayTypeStyle"/>
        <!-- 检查long型定义是否有大写的“L” -->
        <module name="UpperEll"/>

        <!-- 长度检查 -->
        <!-- 方法长度检查，不超过 100 行 -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF"/>
            <property name="max" value="100"/>
            <property name="countEmpty" value="false"/>
        </module>
        <!-- 方法的参数个数不超过 5个，并且不对构造方法进行检查-->
        <module name="ParameterNumber">
            <property name="max" value="5"/>
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>

        <!-- 空格检查-->
        <!-- 检查 for 循环迭代器周围是否有多余的空格 -->
        <module name="EmptyForIteratorPad"/>
        <!-- 检查泛型尖括号周围的空格是否正确，如 List<String> 而非 List < String > -->
        <module name="GenericWhitespace"/>
        <!-- 方法名后跟左圆括号"(" -->
        <module name="MethodParamPad"/>
        <!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 -->
        <module name="TypecastParenPad"/>
        <!-- 检查在某个特定关键字之后应保留空格 -->
        <module name="NoWhitespaceAfter"/>
        <!-- 检查在某个特定关键字之前应保留空格 -->
        <module name="NoWhitespaceBefore"/>
        <!-- 操作符换行策略检查 -->
        <module name="OperatorWrap"/>
        <!-- 圆括号空白 -->
        <module name="ParenPad"/>
        <!-- 检查分隔符是否在空白之后 -->
        <module name="WhitespaceAfter"/>

        <!-- 缩进检查 -->
        <!-- 检查代码缩进是否符合规范 -->
        <module name="Indentation"/>

        <!-- 换行检查 -->
        <module name="EmptyLineSeparator">
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
        </module>

        <!-- 修饰符检查 -->
        <!--
            检查修饰符的顺序是否遵照 java 语言规范，默认 public、protected、private、
            abstract、static、final、transient、volatile、synchronized、native、strictfp
        -->
        <module name="ModifierOrder"/>
        <!-- 检查接口和 annotation 中是否有多余修饰符，如接口方法不必使用 public -->
        <module name="RedundantModifier"/>

        <!-- 代码块检查 -->
        <!-- 检查是否有嵌套代码块 -->
        <module name="AvoidNestedBlocks"/>
        <!-- 检查是否有空代码块 -->
        <module name="EmptyBlock"/>
        <!-- 检查左大括号位置 -->
        <module name="LeftCurly"/>
        <!-- 检查代码块是否缺失{} -->
        <module name="NeedBraces"/>
        <!-- 检查右大括号位置 -->
        <module name="RightCurly"/>

        <!-- 代码检查 -->
        <!-- 检查空的代码段 -->
        <module name="EmptyStatement"/>
        <!-- 检查在重写了 equals 方法后是否重写了 hashCode 方法 -->
        <module name="EqualsHashCode"/>
        <!-- 检查局部变量或参数是否隐藏了类中的变量 -->
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <!-- 检查是否使用工厂方法实例化 -->
        <module name="IllegalInstantiation"/>
        <!-- 检查子表达式中是否有赋值操作 -->
        <module name="InnerAssignment"/>
        <!-- 检查是否有 "魔术" 数字 -->
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="0, 1, -1"/>
            <property name="ignoreAnnotation" value="true"/>
        </module>
        <!-- 检查 switch 语句是否有 default -->
        <module name="MissingSwitchDefault"/>
        <!-- 检查 switch 语句中的 case 必须使用 break -->
        <module name="FallThrough"/>
        <!-- 检查是否有过度复杂的布尔表达式 -->
        <module name="SimplifyBooleanExpression"/>
        <!-- 检查是否有过于复杂的布尔返回代码段 -->
        <module name="SimplifyBooleanReturn"/>
        <!-- 检查重载方法必须写在一起 -->
        <module name="OverloadMethodsDeclarationOrder"/>
        <!-- 检查变量定义必须在第一次使用之前 -->
        <module name="VariableDeclarationUsageDistance"/>
        <!-- 检查不必要的圆括号 -->
        <module name="UnnecessaryParentheses"/>

        <!-- 类设计检查 -->
        <!-- 检查类是否为扩展设计 -->
        <!-- 检查只有 private 构造函数的类是否声明为 final -->
        <module name="FinalClass"/>
        <!-- 检查工具类是否有 public 的构造器 -->
        <module name="HideUtilityClassConstructor"/>
        <!-- 检查接口是否仅定义类型 -->
        <module name="InterfaceIsType"/>
        <!--
            检查类成员的可见度，只有 static final 成员是 public 的，除非在
            本检查的 protectedAllowed 和 packagedAllowed 属性中进行了设置
        -->
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true"/>
            <property name="protectedAllowed" value="true"/>
        </module>

        <!-- 语法 -->
        <!-- String 的比较不能用 != 和 == -->
        <module name="StringLiteralEquality"/>
        <!-- 限制 for 循环最多嵌套 2 层 -->
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>
        <!-- if 最多嵌套 3 层 -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <!-- 检查未被注释的 main 方法,排除以 Application 结尾命名的类 -->
        <module name="UncommentedMain">
            <property name="excludedClasses" value=".*[Application,Test]$"/>
        </module>
        <!-- 不允许使用 System.out.println() -->
        <module name="Regexp">
            <property name="format" value="System\.out\.println"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="避免使用System.out.println，请使用日志框架"/>
        </module>
        <!-- 不允许使用 printStackTrace() -->
        <module name="Regexp">
            <property name="format" value="printStackTrace"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="避免使用printStackTrace，请使用日志框架记录异常"/>
        </module>
        <!-- 检查不要直接使用 Thread.sleep() -->
        <module name="Regexp">
            <property name="format" value="Thread\.sleep"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="避免使用Thread.sleep()，可能导致性能问题"/>
        </module>
        <!--try catch 异常处理数量 3-->
        <module name="NestedTryDepth ">
            <property name="max" value="3"/>
        </module>
        <!-- 检查是否使用了空 catch 块 -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected|ignore"/>
        </module>
        <!-- clone 方法必须调用了 super.clone() -->
        <module name="SuperClone"/>
        <!-- finalize 必须调用了 super.finalize() -->
        <module name="SuperFinalize"/>
    </module>

    <!-- 自定义规则抑制过滤器，用于在指定文件或代码区域禁用特定的检查规则 -->
    <module name="SuppressionFilter">
        <property name="file" value="${config_loc}/suppressions.xml"/>
    </module>
</module>
